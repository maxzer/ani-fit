generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  firstName  String  @default("")
  lastName   String  @default("")
  email      String  @unique
  
  // Дополнительные поля
  photoUrl   String? 
  username   String?
  telegramId String? @unique
  
  // Поля для полного ФИО
  realName      String? @default("")
  realLastName  String? @default("")
  realPatronymic String? @default("")
  
  auth       Auth?
  sessions   Session[]
  events     Event[]
  viewedPriceLists ViewedPriceList[] // Связь с просмотренными прайс-листами
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("users")
}

model Auth {
  id           Int      @id @default(autoincrement())
  refreshToken String?
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("auth")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}

// Модель для событий пользователя
model Event {
  id          Int      @id @default(autoincrement())
  title       String
  date        DateTime
  endDate     DateTime?
  color       String   @default("#4caf50")
  googleEventId String? // ID события в Google Calendar
  
  // Информация о сотруднике в формате JSON
  staffInfo   Json?
  petBreed    String?
  
  // Статус события
  status      String   @default("confirmed") // confirmed, cancelled, pending
  
  // Связь с пользователем
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
} 

// Модель для просмотренных прайс-листов услуг
model ViewedPriceList {
  id          Int      @id @default(autoincrement())
  serviceTitle String   // Название услуги/карточки
  isViewed    Boolean  @default(false)
  
  // Связь с пользователем
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, serviceTitle]) // Уникальное ограничение для пары пользователь-услуга
  @@map("viewed_price_lists")
} 

// Модель для хранения системных настроек
model SystemSetting {
  key        String   @id // Ключ настройки
  value      String   @db.Text // Значение настройки
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("system_settings")
} 