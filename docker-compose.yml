version: '3.8'

services:
  # Nuxt.js приложение
  frontend:
    container_name: ani-fit-frontend
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - NUXT_PORT=3000
      - NUXT_HOST=0.0.0.0
      - API_URL=https://maxzer.ru
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '2'
        reservations:
          memory: 4G
          cpus: '1'
    expose:
      - "3000"
    depends_on:
      - db
      - backend
    networks:
      - ani-fit-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  backend:
    container_name: ani-fit-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ani_fit?schema=public
    volumes:
      - ./backend/prisma:/app/prisma
      - backend_node_modules:/app/node_modules
    expose:
      - "3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ani-fit-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3001/ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db:
    container_name: ani-fit-db
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ani_fit
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ani-fit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Nginx для проксирования запросов
  nginx:
    container_name: ani-fit-nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - ani-fit-network
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  ani-fit-network:
    driver: bridge

volumes:
  postgres_data:
  backend_node_modules: